@page
@model EJ2CoreSampleBrowser.Pages.Excel.AutoFillOption

@section ActionDescription {
This sample demonstrates how to use the Auto Fill and Fill Series options with XlsIO.
}

@section Meta {
<meta name="description" content="This example demonstrates the Auto Fill Option in ASP.NET Core Excel (XlsIO) library. Explore here for more details." />
}

@section Description {
    The Auto Fill and Fill Series features enable users to programmatically populate a range of Excel cells based on defined patterns, sequences, or trends. These capabilities help reduce manual data entry by automatically generating values using built-in logic.
<br />
<br />
<b>Features:</b>
<ul>
    <li>Allows automatic filling of cells with common sequences, including numbers, months, and custom patterns.</li>
    <li>Offers Fill Series options, including linear, growth, and date-based sequences.</li>
    <li>Supports configuration of step value, stop value, series direction, and trend usage.</li>
</ul>
}

@section ControlsSection {
    <div class="control-section">
        @{
            Html.BeginForm("autofilloption", "excel", FormMethod.Post);
            {
                <div class="rowdiv">
                    <p style="font-weight:normal">
                        Click the "Create Document" button to generate and view the Excel file. You can enter the Step Value and Stop Value as either a number or a date in MM/DD/YYYY format, and the generated document can be opened using Microsoft Excel or Excel Viewer.
                    </p>
                </div>
                <table style="border-collapse: separate; border-spacing: 10px;">
                    <tr>
                        <td><label for="FillType" style="font-weight:normal">Fill Type:</label></td>
                        <td>
                            <div>
                                <input type="radio" id="AutoFill" name="FillType" value="AutoFill" checked style="margin-right: 4px;" onchange="toggleFillSeriesFields()"/>
                                <label for="AutoFill" style="font-weight: normal; margin-right: 20px;vertical-align: middle;">Auto Fill</label>
                                <input type="radio" id="FillSeries" name="FillType" value="FillSeries" style="margin-right: 4px;" onchange="toggleFillSeriesFields()" />
                                <label for="FillSeries" style="font-weight: normal; vertical-align: middle;">Fill Series</label>
                            </div>
                        </td>
                    </tr>
                    <tr>
                        <td><label for="FillOption" style="font-weight:normal">Fill Option:</label></td>
                        <td>
                            <select id="FillOption" name="FillOption" class="form-control" style="width:180px" onchange="toggleFillSeriesFields()">
                                @foreach (var option in Model.GetFillOptions(Model.IsTrend))
                                {
                                    <option value="@option">@option</option>
                                }
                            </select>
                        </td>
                    </tr>
                    <tr>
                        <td><label for="SeriesBy" style="font-weight:normal">Series In:</label></td>
                        <td>
                            <select name="SeriesBy" id="SeriesBy" class="form-control" style="width:180px">
                                <option value="Rows" selected>Rows</option>
                                <option value="Columns">Columns</option>
                            </select>
                        </td>
                        <td>
                        </td>
                    </tr>
                    <tr id="TrendRow">
                        <td></td>
                        <td>
                            <input type="checkbox" id="IsTrend" name="IsTrend" value="True" onchange="UpdateList()" size="20" />
                            <label for="IsTrend" style="font-weight:normal; vertical-align: middle;">Trend</label>
                        </td>
                        <td></td>
                    </tr>
                    <tr>
                        <td><label for="StepValue" style="font-weight:normal">Step Value:</label></td>
                        <td>
                            <input type="text" id="StepValue" name="StepValueText" class="form-control" style="width:180px" />
                        </td>
                    </tr>
                    <tr>
                        <td><label for="StopValue" style="font-weight:normal">Stop Value:</label></td>
                        <td>
                            <input type="text" id="StopValue" name="StopValueText" class="form-control" style="width:180px" />
                        </td>
                    </tr>
                </table>
                <div class="rowdiv">
                    <input id="createbtn" class="e-btn" type="submit" name="button" value="Create Document" style="width:140px; text-transform:capitalize" />
                </div>

                Html.EndForm();
            }
        }
    </div>
    @{

        var autoFillOptions = new List<string>{
                                "Default",
                                "Copy",
                                "Series",
                                "Formats",
                                "Values",
                                "Days",
                                "Weekdays",
                                "Months",
                                "Years",
                                "Linear Trend",
                                "Growth Trend"
                            };

        var fillSeriesOptions = new List<string>
                                                {
                                                    "Linear",
                                                    "Growth",
                                                    "Days",
                                                    "Weekdays",
                                                    "Months",
                                                    "Years",
                                                    "Auto Fill"
                                                };

        var trendOnlyOptions = new List<string> { "Linear", "Growth" };

        var autoFillOptionsJson = System.Text.Json.JsonSerializer.Serialize(autoFillOptions);
        var fillSeriesOptionsJson = System.Text.Json.JsonSerializer.Serialize(fillSeriesOptions);
        var trendOnlyOptionsJson = System.Text.Json.JsonSerializer.Serialize(trendOnlyOptions);
    }
    <script>
        var autoFillOptions = @Html.Raw(autoFillOptionsJson);
        var fillSeriesOptions = @Html.Raw(fillSeriesOptionsJson);

                function toggleFillSeriesFields() {
          // First retrieve the necessary elements and states
          var isFillSeries = document.getElementById("FillSeries").checked;
          var fillOption = document.getElementById("FillOption").value;
          var trendRow = document.getElementById("TrendRow");

          // Define whether the fill option is Auto Fill
          var isAutoFillOption = fillOption === "Auto Fill";

          // Check the conditions to uncheck or enable/disable the IsTrend checkbox
          if (!isFillSeries || !(fillOption === "Linear" || fillOption === "Growth")) {
            document.getElementById("IsTrend").checked = false;
          }

          // Enable or disable the IsTrend checkbox based on conditions
          document.getElementById("IsTrend").disabled = isAutoFillOption || !isFillSeries;

          // Decide if the trend row should be visible
          if (trendRow) {
            const showTrend = isFillSeries && (fillOption === "Linear" || fillOption === "Growth");
            trendRow.style.display = showTrend ? "" : "none";
          }

          // Enable or disable related fields depending on the fill options
          var isTrend = document.getElementById("IsTrend").checked; // After checking conditions
          var isDisabled = isAutoFillOption || isTrend || !isFillSeries

          if(isDisabled)
          {
              document.getElementById("StepValue").value = "";
              document.getElementById("StopValue").value = "";
          }
          if(!isFillSeries)
          {
            document.getElementById("SeriesBy").value ="Rows";
          }

          document.getElementById("StepValue").disabled = isDisabled;
          document.getElementById("StopValue").disabled = isDisabled;
          document.getElementById("SeriesBy").disabled = !isFillSeries;
          
        }

        function UpdateList() {
            var isAutoFill = document.getElementById("AutoFill").checked;
            var isFillSeries = document.getElementById("FillSeries").checked;
            var select = document.getElementById("FillOption");

            let options = [];

            if (isAutoFill) {
                options = autoFillOptions;
            } else if (isFillSeries) {
                options =  fillSeriesOptions;
            }

            // Clear and populate dropdown
            select.innerHTML = '';
            options.forEach(function (opt) {
                var option = document.createElement("option");
                option.value = opt;
                option.text = opt;
                select.appendChild(option);
            });

            toggleFillSeriesFields();
        }

        document.addEventListener('DOMContentLoaded', function () {
            // Initial setup
            toggleFillSeriesFields();
            UpdateList();

            // Bind radio buttons individually
            document.getElementById("AutoFill").addEventListener("change", UpdateList);
            document.getElementById("FillSeries").addEventListener("change", UpdateList);
            document.getElementById("IsTrend").addEventListener("change", UpdateList);
        });
    </script>


}



@section Title {
    <title>ASP.NET Core Excel (XlsIO) - Auto Fill and Fill Series Example - Syncfusion Demos</title>
}

@section Header {
    <h1 class='sb-sample-text'>Example of Auto Fill and Fill Series in ASP.NET Core Excel (XlsIO)</h1>
}
