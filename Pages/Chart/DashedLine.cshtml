@page
@model EJ2CoreSampleBrowser.Pages.Chart.DashedLineModel
@{
    string sun = "Aug";
    string cloud = "Feb";
}

@section ControlsSection{

    <div class="control-section" align="center">

        <ejs-chart id="dashedLineContainer" load="load" title="Fruits Production Statistics">
            <e-chart-tooltipsettings enable="true" shared="true" format="${point.x} : <b>${point.y}</b>" header="<b>Fruits Production</b>">
            </e-chart-tooltipsettings>
            <e-chart-primaryxaxis valueType="@Syncfusion.EJ2.Charts.ValueType.Category" interval="1">
                <e-majorgridlines width="0"></e-majorgridlines>
                <e-majorticklines width="0"></e-majorticklines>
            </e-chart-primaryxaxis>
            <e-chart-primaryyaxis labelFormat="{value}K" rangePadding="@Syncfusion.EJ2.Charts.ChartRangePadding.None" minimum=0 maximum=300 interval=50>
                <e-linestyle width="0"></e-linestyle>
                <e-majorticklines width="0"></e-majorticklines>
            </e-chart-primaryyaxis>
            <e-chart-chartarea>
                <e-chartarea-border width="0"></e-chartarea-border>
            </e-chart-chartarea>
            <e-chart-crosshairsettings enable="false" lineType="@Syncfusion.EJ2.Charts.LineType.Vertical">
            </e-chart-crosshairsettings>
            <e-series-collection>
                <e-series dataSource="@Model.ChartData" xName="Period" width="2" opacity="1" yName="Banana_ProductionRate" type="@Syncfusion.EJ2.Charts.ChartSeriesType.Line">
                    <e-series-marker visible="false" height="7" width="7"></e-series-marker>
                </e-series>
                <e-series dashArray="10" dataSource="@Model.ChartDataValues" xName="Period" width="2" opacity="1" yName="Banana_ProductionRate" type="@Syncfusion.EJ2.Charts.ChartSeriesType.Line">
                    <e-series-marker visible="false" height="7" width="7" shape="@Syncfusion.EJ2.Charts.ChartShape.Diamond"></e-series-marker>
                </e-series>
            </e-series-collection>
            <e-chart-annotations>
                <e-chart-annotation content="<div id='chart_cloud'>Actual</div>" coordinateUnits="@Syncfusion.EJ2.Charts.Units.Point" x=cloud y="125"></e-chart-annotation>
                <e-chart-annotation content="<div id='chart_cloud'>Forecast</div>" coordinateUnits="@Syncfusion.EJ2.Charts.Units.Point" x=sun y="210"></e-chart-annotation>
            </e-chart-annotations>
        </ejs-chart>

    </div>

    <script>
        function load(args) {
            let annotationColor = 'light';
            args.chart.annotations[0].content = '<div style="color:black; font-weight:bold;">Actual</div>';
            args.chart.annotations[1].content = '<div style="color:black; font-weight:bold;">Forecast</div>';
            let selectedTheme = location.hash.split('/')[1];
            selectedTheme = selectedTheme ? selectedTheme : 'Fluent2';
            args.chart.theme = (selectedTheme.charAt(0).toUpperCase() + selectedTheme.slice(1)).replace(/-dark/i, "Dark").replace(/contrast/i, 'Contrast').replace(/-highContrast/i, 'HighContrast').replace(/5.3/i, '5');
            args.chart.width = ej.base.Browser.isDevice ? "100%" : "75%";
            args.chart.primaryXAxis.labelIntersectAction = ej.base.Browser.isDevice ? 'None' : 'Trim';
            args.chart.primaryXAxis.labelRotation = ej.base.Browser.isDevice ? -45 : 0;
            if (selectedTheme && selectedTheme.indexOf('fabric-dark') > -1) {
                annotationColor = 'dark'
            } else if (selectedTheme && selectedTheme.indexOf('fabric') > -1) {
                annotationColor = 'light'
            } else if (selectedTheme === 'material-dark') {
                annotationColor = 'dark'
            } else if (selectedTheme === 'material') {
                annotationColor = 'light'
            } else if (selectedTheme === 'bootstrap5-dark') {
                annotationColor = 'dark'
            } else if (selectedTheme === 'bootstrap5') {
                annotationColor = 'light'
            } else if (selectedTheme === 'bootstrap-dark') {
                annotationColor = 'dark'
            } else if (selectedTheme === 'bootstrap') {
                annotationColor = 'light'
            } else if (selectedTheme === 'highcontrast') {
                annotationColor = 'dark'
            } else if (selectedTheme === 'fluent-dark') {
                annotationColor = 'dark'
            } else if (selectedTheme === 'fluent') {
                annotationColor = 'light'
            } else if (selectedTheme === 'tailwind-dark') {
                annotationColor = 'dark'
            } else if (selectedTheme === 'tailwind') {
                annotationColor = 'light'
            } else if (selectedTheme === 'material3-dark') {
                annotationColor = 'dark';
            } else if (selectedTheme === 'material3') {
                annotationColor = 'light';
            } else if (selectedTheme === 'fluent2') {
                annotationColor = 'light';
            } else if (selectedTheme === 'fluent2-highcontrast' || selectedTheme === 'fluent2-dark') {
                annotationColor = 'dark';
            } else if (selectedTheme === 'tailwind3-dark') {
                annotationColor = 'dark'
            } else if (selectedTheme === 'tailwind3') {
                annotationColor = 'light'
            } else {
                annotationColor = 'light'
            }

            if (annotationColor === 'light') {
                args.chart.annotations[0].content = '<div style="color:black; font-weight:bold;">Actual</div>';
                args.chart.annotations[1].content = '<div style="color:black; font-weight:bold;">Forecast</div>';
            }
            else {
                args.chart.annotations[0].content = '<div style="color:whitesmoke; font-weight:bold;">Actual</div>';
                args.chart.annotations[1].content = '<div style="color:whitesmoke; font-weight:bold;">Forecast</div>';
            }

        }
    </script>
}
@*custom code start*@
@section Scripts{

}

<style>

    #control-container {
        padding: 0px !important;
    }

    #dashedLineContainer_Series_1,
    #dashedLineContainer_Series_0 {
        stroke-linejoin: round;
        stroke-linecap: round;
        -webkit-animation: dash 1s linear infinite;
        animation: dash 1s linear infinite;
    }

    #dashedLineContainer_Series_0_Point_3_Symbol {
        -webkit-animation: opac 1s ease-out infinite;
        animation: opac 1s ease-out infinite;
    }

    @@-webkit-keyframes dash {
        100% {
            stroke-dashoffset: -20px;
        }
    }

    @@keyframes dash {
        100% {
            stroke-dashoffset: -20px;
        }
    }

    @@keyframes opac {
        0% {
            stroke-opacity: 1;
            stroke-width: 0px;
        }

        100% {
            stroke-opacity: 0;
            stroke-width: 10px;
        }
    }
</style>
@section Meta{
    <meta name="description" content="This example demonstrates the Dashed Line in ASP.NET Core Chart control. Explore here for more details." />
}
@*custom code end*@
@section ActionDescription{
    <p>
        This sample shows the rate of fruit production with default line series and dash array in the chart. Dashed lines are animated using CSS animation.
    </p>
}
@section Description{
    <div>
        <p>
            In this example, you will see how to render and configure a line chart. Line charts are used to represent time-dependent data, showing trends in data at equal intervals. You can use <a target="_blank" href="https://help.syncfusion.com/cr/aspnetcore-js2/Syncfusion.EJ2.Charts.ChartSeries.html#Syncfusion_EJ2_Charts_ChartSeries_DashArray" aria-label="Navigate to the DashArray property reference for ASP.NET Core ChartSeries">DashArray</a>,
            <a target="_blank" href="https://help.syncfusion.com/cr/aspnetcore-js2/Syncfusion.EJ2.Charts.ChartSeries.html#Syncfusion_EJ2_Charts_ChartSeries_Width" aria-label="Navigate to the Width property reference for ASP.NET Core ChartSeries">Width</a> and <a target="_blank" href="https://help.syncfusion.com/cr/aspnetcore-js2/Syncfusion.EJ2.Charts.ChartSeries.html#Syncfusion_EJ2_Charts_ChartSeries_Fill" aria-label="Navigate to the Fill property reference for ASP.NET Core ChartSeries">Fill</a> properties to customize the line.
        </p>
        <p>
            <code>Tooltip</code> is enabled in this example. To see the tooltip in action, hover a point or tap on a point in touch enabled devices.
        </p>
        <p>
            More information about the dashed line can be found in this
            <a target="_blank" href="https://ej2.syncfusion.com/aspnetcore/documentation/chart/chart-types/line#series-customization" aria-label="Navigate to the documentation for Series customization in ASP.NET Core Chart control">documentation section</a>.
        </p>
    </div>
}
@section Title{
    <title>ASP.NET Core Chart Dashed Line Example - Syncfusion Demos </title>
}
@section Header{
    <h1 class='sb-sample-text'>Example of Dashed Line in ASP.NET Core Chart Control</h1>
}

