@page

@using Syncfusion.EJ2
@section ControlsSection {
    <div class="control-section" align="center">
        <ejs-chart id="stock" load="load" axisRangeCalculated="axisRangeCalculated" pointRender="pointRender" title="AAPL Historical">
            <e-chart-primaryxaxis valueType="@Syncfusion.EJ2.Charts.ValueType.DateTime" labelIntersectAction="@Syncfusion.EJ2.Charts.LabelIntersectAction.Hide">
                <e-majorgridlines width="0"></e-majorgridlines>
                <e-crosshairtooltip enable="true"></e-crosshairtooltip>
            </e-chart-primaryxaxis>
            <e-chart-primaryyaxis minimum="120" interval="20" opposedPosition="true">
                <e-majorgridlines width="1"></e-majorgridlines>
                <e-majorticklines width="0"></e-majorticklines>
                <e-linestyle width="0"></e-linestyle>
                <e-crosshairtooltip enable="true"></e-crosshairtooltip>
            </e-chart-primaryyaxis>
            <e-chart-chartarea>
                <e-chartarea-border width="0"></e-chartarea-border>
            </e-chart-chartarea>
            <e-chart-annotations>
                <e-chart-annotation content="<div></div>" coordinateUnits="@Syncfusion.EJ2.Charts.Units.Point" x="new DateTime(2000, 5, 2, 2, 0, 1)" y="140" region="@Syncfusion.EJ2.Charts.Regions.Series">
                </e-chart-annotation>
            </e-chart-annotations>
            <e-chart-crosshairsettings enable="true" dashArray="5,5"></e-chart-crosshairsettings>
            <e-series-collection>
                <e-series xName="x" low="low" high="high" open="open" close="close" type="@Syncfusion.EJ2.Charts.ChartSeriesType.Candle" bearFillColor="#2ecd71" bullFillColor="#e74c3d" columnWidth="0.4">
                </e-series>
            </e-series-collection>
        </ejs-chart>
    </div>

    <script>
        //Initialize the data source
        var value = 180;
        var getData = () => {
            var series = [];
            var point;
            for (var i = 0; i < 30; i++) {
                value = 180 + Math.round((Math.random() * 25) * Math.sin(i * Math.PI / 8));
                value = Math.max(140, Math.min(260, value));
                if (value > 260) {
                    value = 260;
                }
                if (value < 140) {
                    value = 140;
                }
                var open = value + Math.round(Math.random() * 18);
                var low = Math.min(value, open) - Math.round(Math.random() * 6);
                var high = Math.min(220, Math.max(value, open) + Math.round(Math.random() * 15));
                point = {
                    x: new Date(2000, 5, 2, 2, 0, i),
                    close: value,
                    open: open,
                    low: low,
                    high: high
                };
                series.push(point);
            }
            return { series: series };
        };
        var data = getData().series;
        var incVal = 0;
        var updateVal = data.length;
        var pointAdded = false;
        var intervalId;
        function load(args) {
            var selectedTheme = location.hash.split('/')[1];
            selectedTheme = selectedTheme ? selectedTheme : 'Fluent2';
            args.chart.theme = (selectedTheme.charAt(0).toUpperCase() + selectedTheme.slice(1).replace(/-dark/i, 'Dark').replace(/contrast/i, 'Contrast').replace(/-highContrast/i, 'HighContrast').replace(/5.3/i, '5'));
            args.chart.width = ej.base.Browser.isDevice ? "100%" : "90%";
            args.chart.series[0].dataSource = data;
            args.chart.primaryXAxis.edgeLabelPlacement = ej.base.Browser.isDevice ? "None" : "Shift";
            args.chart.primaryXAxis.interval = ej.base.Browser.isDevice ? 8 : 4;
            stockClearInterval();
            intervalId = setInterval(function () {
                var container = document.getElementById('stock');
                if (container && container.id === args.chart.element.id) {
                    var newData1 = [];
                    var value = 180;
                    pointAdded = true;
                    for (var i = 0; i < data.length; i++) {
                        newData1.push(Object.assign({}, data[i]));
                    }
                    if (newData1.length > 0) {
                        var lastIndex = newData1.length - 1;
                        var previousClose = newData1[lastIndex].close;
                        newData1[lastIndex].close += (Math.random() < 0.5 ? 1 : -1) * Math.random() * 25;
                        newData1[lastIndex].close = Math.min(Math.min(Math.max(newData1[lastIndex].close, newData1[lastIndex].low + 5), newData1[lastIndex].high - 5), newData1[lastIndex].open - 2);
                        if (previousClose === newData1[lastIndex].close) {
                            newData1[lastIndex].close -= 5;
                        }
                    }
                    if (incVal < 10) {
                        if (args.chart.series.length > 0) {
                            args.chart.series[0].setData(newData1);
                            incVal++;
                        }
                    }
                    else {
                        var change = Math.round((Math.random() < 0.49 ? 1 : -1) * Math.random() * 10);
                        value += change;
                        if (value > 260) {
                            value = 260;
                        } 
                        if (value < 140) {
                            value = 140;
                        }
                        var open = value + Math.round(Math.random() * 12);
                        var low = Math.min(value, open) - Math.round(Math.random() * 8);
                        var high = Math.max(value, open) + Math.round(Math.random() * 15);
                        if (args.chart.series.length > 0) {
                            var lastDataPointIndex = args.chart.series[0].dataSource.length - 1;
                            if (lastDataPointIndex >= 0) {
                                var timestamp = args.chart.series[0].dataSource[lastDataPointIndex].x;
                                var lastTimestamp = new Date(timestamp).getTime();
                                args.chart.series[0].addPoint({ x: new Date(lastTimestamp + 1000), high: high, low: low, open: open, close: value });
                            }
                        }
                        incVal = 0;
                        updateVal++;
                    }
                }
                else {
                    stockClearInterval();
                }
            }, 1000);
        }
        function stockClearInterval() {
            if (intervalId) {
                clearInterval(intervalId);
                intervalId = null;
            }
        }
        function pointRender(args) {
            if (args.series.chart.enableRtl) {
                args.series.chart.annotations[0].x = 0;
            }
            if (pointAdded && args.series.points[args.series.points.length - 1] === args.point) {
                var firstPoint = args.series.chart.enableRtl ? args.series.points[args.series.points.length - 1].x : args.series.points[0].x;
                args.series.chart.annotations[0].x = new Date(firstPoint).getTime() + (args.series.chart.enableRtl ? 2000 : 1000);
                args.series.chart.annotations[0].y = args.point.close + 0.25;
                args.series.chart.annotations[0].content = '<div style="width: ' + args.series.chart.initialClipRect.width + 'px; height: 0; left: ' +
                    (ej.base.Browser.isDevice ? -10 : -16) + 'px; position: absolute;">' +
                    '<svg width="100%" height="2" style="display: block;">' +
                    '<line x1="0" y1="1" x2="' + args.series.chart.initialClipRect.width + '" y2="1" ' +
                    'style="stroke:#868180; stroke-width:0.75; stroke-dasharray:5,5;" />' +
                    '</svg>' +
                    '</div>' +
                    '<div style="width: 40px; height: 18px; background-color: ' + args.fill + '; border: 1px solid rgba(48, 153, 245, 0.4); color: white; font-size: 11px; text-align: center; line-height: 18px; position: absolute; left: ' +
                    (args.series.chart.enableRtl ? -args.series.chart.initialClipRect : args.series.chart.initialClipRect.width - 20) + 'px; top: -9px;">' +
                    (args.point.close).toFixed(2) +
                    '</div>';
            }
        }
        function axisRangeCalculated(args) {
            if (args.axis.name === 'primaryXAxis') {
                var lastPoint = args.axis.series[0].points[args.axis.series[0].points.length - 1].x;
                args.maximum = new Date(lastPoint).getTime() + 2500;
                var firstPoint = args.axis.series[0].points[0].x;
                args.minimum = new Date(firstPoint).getTime() + 500;
            }
        }
    </script>
}
@*custom code start*@
@section Scripts {
}
<style>

    #control-container {
        padding: 0px !important;
    }
</style>
@section Meta {
    <meta name="description" content="This example demonstrates the Live Stock Data in ASP.NET Core Chart control. Explore here for more details." />
}
@*custom code end*@
@section ActionDescription{
    <p>
        This sample visualizes the animation in the candle chart when existing data is updated or new data is added.
    </p>
}
@section Description{
    <p>
        In this example, you can see how to render and configure a candlestick series to display data that updates every second using the <code>SetData</code> method and adds new data every ten seconds using the <code>AddPoint</code> method. The chart demonstrates setting up a crosshair to follow the latest data and adjusting the point color based on the value.
    </p>
    <p>
        More information on the candle series can be found in this
        <a target="_blank" href="https://ej2.syncfusion.com/aspnetcore/documentation/chart/chart-types/candle" aria-label="Navigate to the documentation for Candle Chart in ASP.NET Core Chart control">documentation section</a>.
    </p>
}
@section Title{
    <title>ASP.NET Core Chart Live Stock Data Example - Syncfusion Demos </title>
}
@section Header{
    <h1 class='sb-sample-text'>Example of Live Stock Data in ASP.NET Core Chart Control</h1>
}
