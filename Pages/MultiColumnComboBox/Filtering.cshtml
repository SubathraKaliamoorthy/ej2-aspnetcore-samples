@page
@model EJ2CoreSampleBrowser.Pages.MultiColumnComboBox.FilteringModel

@using Syncfusion.EJ2
@using Newtonsoft.Json

@section ControlsSection {
    <div class="control-section">
        <div class='control-wrapper'>
            <div style='padding-top:60px;'>
                <ejs-multicolumncombobox id="filtering" dataSource="@Model.work" popupHeight="230px"
                    placeholder="Select a name" allowFiltering=true filtering="onfiltering">
                    <e-multicolumncombobox-fields text="Name" value="Experience"></e-multicolumncombobox-fields>
                    <e-multicolumncombobox-columns>
                        <e-multicolumncombobox-column field="Name" header="Name" width="100"></e-multicolumncombobox-column>
                        <e-multicolumncombobox-column field="YearOfJoining" header="Year of Joining" width="120"></e-multicolumncombobox-column>
                        <e-multicolumncombobox-column field="Status" header="Status" width="90"></e-multicolumncombobox-column>
                        <e-multicolumncombobox-column field="Location" header="Location" width="100"></e-multicolumncombobox-column>
                        <e-multicolumncombobox-column field="Experience" header="Experience in Year" width="130"></e-multicolumncombobox-column>
                    </e-multicolumncombobox-columns>
                </ejs-multicolumncombobox>
            </div>
        </div>
    </div>
    <!-- custom code start -->
    <style>
        .control-wrapper {
            margin: 0 auto;
            width: 585px;
        }

        @@media screen and (max-width: 480px) {
            .control-wrapper {
                width: 300px;
            }
        }
    </style>
    <!-- custom code end-->
    <script type="text/javascript">
        function onfiltering(e) {
            var query = new ej.data.Query();
            query = (e.text !== '') ? query.where('Name', 'startswith', e.text, true) : query;
            e.updateData(@Html.Raw(JsonConvert.SerializeObject(Model.work)), query);
        }
    </script>
}

@section Meta {
    <meta name="description" content="This example demonstrates the Filtering in ASP.NET Core MultiColumn ComboBox control. Explore here for more details." />
}
@section ActionDescription {
    <div id="action-description">
        <p>This sample demonstrates the built-in support to filter the datasource when <code>allowFiltering</code>is enabled in the MultiColumn ComboBox.</p>
    </div>
}
@section Description {
    <div id="description">
        <p>
            In this sample, the employee data is filtered based on <code>Location</code> column, which illustrates how employee details are filtered dynamically based on typed characters.
        </p>
        <p>
            This sample illustrates that, query the data source and pass the resulted data when characters are typed in the search box triggers the <code>filtering</code>
            event, you can filter down the data source and return the resulted data to MultiColumn ComboBox via <code> updateData</code>method to display its list of employees.
        </p>
    </div>
}
@section Title {
    <title>ASP.NET Core MultiColumn ComboBox Filtering Example - Syncfusion Demos </title>
}
@section Header {
    <h1 class='sb-sample-text'>Example of Filtering in ASP.NET Core MultiColumn ComboBox Control</h1>
}