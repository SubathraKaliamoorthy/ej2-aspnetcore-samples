@using Syncfusion.EJ2

@{
	bool signBtnDisabled = true;
	bool downloadBtnDisabled = true;
}

@section ControlsSection{
	<div class="control-section">
		<ejs-toolbar id="topToolbar" height="56px">
			<e-toolbar-items>
				<e-toolbar-item prefixIcon="e-icons e-folder-open" cssClass="e-pv-open-document-container" tooltipText="Open file" id="openButton"
							align="Left" click="openDocument"></e-toolbar-item>
				<e-toolbar-item text="Complete Signing" width="150px" tooltipText="Finish Signing" id="pdfviewer_sign"
							align="Right" click="signDocument" cssClass="e-pv-button-container" disabled=signBtnDisabled></e-toolbar-item>
				<e-toolbar-item prefixIcon="e-icons e-download" cssClass="e-pv-open-document-container" tooltipText="Download" id="downloadButton"
							align="Right" click="downloadClicked" disabled=downloadBtnDisabled></e-toolbar-item>
			</e-toolbar-items>
		</ejs-toolbar>
		<ejs-message id="msg_success" visible="false" severity="Success"></ejs-message>
		<ejs-message id="msg_warning" visible="false" severity="Warning"></ejs-message>
		<ejs-message id="msg_error" visible="false" severity="Error"></ejs-message>
		<ejs-pdfviewer id="pdfviewer" serviceUrl="api/PdfViewer" enableToolbar="false" enableThumbnail="false" enableNavigationToolbar="false"
				   addSignature="addSignature" documentLoad="documentLoaded" style="height:641px;"></ejs-pdfviewer>
		<input type="file" id="fileUpload" accept=".pdf" style="display:block;visibility:hidden;width:0;height:0;">
	</div>
}

@section Meta{
	<meta name="description" content="This example demonstrates the Annotations in ASP.NET Core PDF Viewer control. Explore here for more details." />
                }

@section ActionDescription{
	<div id="action-description">
        <p>This sample demonstrates how to digitally sign a PDF document from code behind using Syncfusion's PDF Viewer and PDF Library</p>
    </div>
}

@section Description{

	<div id="description">
		<p>
			This sample operates correctly when a signature field is present in the PDF document. If all signature fields
			are signed, the "Finish Signing" button becomes enabled. Clicking this button adds a digital signature
			certificate programmatically and reloads the digitally signed document into the viewer.
		</p>

		<br />

		<p>The below are the messages shown in the respective scenarios:</p>

		<br />

		<p>1. The document has been digitally signed, but it has been modified since it was signed and at least one
			signature is invalid.</p>
		<ul>
			<li>This message appears if the digitally signed document is edited after reloading.</li>
		</ul>

		<p>2. The document has been digitally signed and at least one signature has a problem.</p>

		<ul>
			<li>This message is shown if the digital signature is not registered on the machine and is not in the trusted
				list. Adding the certificate to the trusted list is necessary.</li>
		</ul>

		<p>3. The document has been digitally signed and all the signatures are valid.</p>

		<ul>
			<li>This message indicates that the document is digitally signed without any issues.</li>
		</ul>

		<p>
			More information on the PDF Viewer instantiation can be found on this
			<a target="_blank" href="https://ej2.syncfusion.com/aspnetcore/documentation/pdfviewer/getting-started" aria-label="Navigate to the documentation for getting started with ASP.NET Core PDF Viewer control" aria-label="documentation">
				documentation section </a>.
		</p>
	</div>
}

@*custom code start*@
<style>
	.control-section {
		height: 716px;
		width: 100%;
	}
</style>
@*custom code end*@
<script type="text/javascript">
	var toolbarObj;
	var viewer;
	var msgWarning;
	var msgError;
	var msgSuccess;
	var documentData;
	// Specifies whether the document has a digital signature or not.
	var hasDigitalSignature = false;
	var openDocument;
	var fileName;
	var treeObj;
	window.onload = function () {
		viewer = document.getElementById('pdfviewer').ej2_instances[0];
		toolbarObj = document.getElementById('topToolbar').ej2_instances[0];
		msgSuccess = document.getElementById('msg_success').ej2_instances[0];
		msgWarning = document.getElementById('msg_warning').ej2_instances[0];
		msgError = document.getElementById('msg_error').ej2_instances[0];
		viewer.serviceUrl = window.baseurl + 'api/PdfViewer';
		viewer.load("InvisibleDigitalSignature.pdf", null);
		document.getElementById('fileUpload').addEventListener('change', readFile, false);
	}

	function openDocument() {
		document.getElementById('fileUpload').click();
	}

	function addSignature(args) {
		var field = viewer.retrieveFormFields();
		var signatureFieldCount = 0;
		var signaturesCount = 0;
		for (var i = 0; i < field.Count; i++) {
			if (field[i].Type.ToString() == ("SignatureField")) {
				signatureFieldCount++;
			}
			if (field[i].Value != "" && field[i].Value != null && field[i].Type.ToString() == ("SignatureField")) {
				signaturesCount++;
			}
		}
		if (signatureFieldCount == signaturesCount) {
			if (!hasDigitalSignature) {
				toolbarObj.items[1].disabled = false;
			}
		}
	}

	function signDocument(args) {
		viewer.serverActionSettings.download = 'AddSignature';
		var data;
		var base64data;
		viewer.saveAsBlob().then(function (value) {
			data = value;
			var reader = new FileReader();
			reader.readAsDataURL(data);
			reader.onload = function () {
				base64data = reader.result;
				documentData = base64data;
				viewer.load(base64data, null);
				viewer.fileName = fileName;
				viewer.downloadFileName = fileName;
				toolbarObj.items[1].disabled = true;
				toolbarObj.items[2].disabled = false;
			};
		});
		viewer.serverActionSettings.download = 'Download';
	}
	function documentLoaded(args) {
		fileName = args.documentName;
		var postData = {
			documentData: documentData
		};
		var options = {
			method: 'POST',
			headers: { 'Content-Type': 'application/json' },
			body: JSON.stringify(postData)
		};
		var apiUrl = window.baseurl + 'api/PdfViewer/ValidateSignature';
		fetch(apiUrl, options)
			.then(function (response) { return response.json(); })
			.then(function (body) {
				if (body.successVisible || body.warningVisible || body.errorVisible)
					toolbarObj.items[1].disabled = true;
				if (!body.downloadVisibility)
					toolbarObj.items[2].disabled = false;
				if ((body.successVisible)) {
					setTimeout(function () {
						msgSuccess.content = body.message;
						msgSuccess.visible = true;
					}, 1000);
					setTimeout(function () {
						msgSuccess.visible = false;
					}, 5000);
				}
				if ((body.warningVisible)) {
					msgWarning.content = body.message;
					msgWarning.visible = true;
				}
				if (body.errorVisible) {
					msgError.content = body.message;
					msgError.visible = true;
				}
			});
	}

	function downloadClicked(args) {
		viewer.download();
	}


	function readFile(args) {
		var upoadedFiles = args.target.files;
		if (args.target.files[0] !== null) {
			var uploadedFile = upoadedFiles[0];
			fileName = upoadedFiles[0].name;
			if (uploadedFile) {
				var reader = new FileReader();
				reader.readAsDataURL(uploadedFile);
				// tslint:disable-next-line
				reader.onload = function (e) {
					toolbarObj.items[2].disabled = true;
					let uploadedFileUrl = e.currentTarget.result;
					documentData = uploadedFileUrl;
					viewer.load(uploadedFileUrl, null);
					viewer.fileName = fileName;
					viewer.downloadFileName = fileName;
				};
			}
		}
	}

</script>
@section Title{
	<title>ASP.NET Core PDF Viewer Invisible Signature Example - Syncfusion Demos </title>
                }
@section Header{
	<h1 class='sb-sample-text'>Example of Invisible Signature in ASP.NET Core PDF Viewer Control</h1>
                }