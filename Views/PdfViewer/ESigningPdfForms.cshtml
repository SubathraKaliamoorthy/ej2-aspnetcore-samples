@{
    string dropdownMenu = "#e-pv-e-sign-dropdown-menu";
    string btntemplate = "#e-pv-e-sign-btn-template";
}
@{
    var Modalanimation = new Syncfusion.EJ2.Popups.DialogAnimationSettings { Effect = Syncfusion.EJ2.Popups.DialogEffect.None };
    var Okbutton = new
    {
        content = "OK",
    };
    List<object> userDetails = new List<object>
    {
        new { Name = "Anne Dodsworth", Eimg = "profile1", Id = "00ff00", Mail = "anne@mycompany.com", fieldIds = new List<int>() },
        new { Name = "Andrew Fuller", Eimg = "profile2", Id = "ff0000", Mail = "andrew@mycompany.com", fieldIds = new List<int>() }
    };
}
@using Syncfusion.EJ2
@section ControlsSection {
    <div style="display:flex">
        <div class="e-pv-e-sign-control control-section" style="width:100%">
            @{
                List<object> userDetails = new List<object>
        {
        new { Name = "Andrew Fuller", Eimg = "profile2", Id = "ff0000", Mail = "andrew@mycompany.com", fieldIds = new List<int>() },
        new { Name = "Anne Dodsworth", Eimg = "profile1", Id = "00ff00", Mail = "anne@mycompany.com", fieldIds = new List<int>() },
        };
            }
            <div id="e-pv-e-sign-dropdown-menu" style="position: absolute; left: 0; z-index: 1000;">
                <ejs-dropdownlist id="e-pv-e-sign-employees" dataSource="@userDetails" index="0" popupHeight="200px" select="userChange" enabled="true"
                                  itemTemplate="@Html.Raw("<div style='display: flex; height: 50px; width: 200px;'><img class='e-pv-e-sign-empImage' src='../css/pdfviewer/images/employees/${Eimg}.png' style='margin: 10px 6px; border-radius: 50%; border: 1px solid ${getBorderColor(Mail)};' height='30px' width='30px' alt='employee'/><div><div class='e-pv-e-sign-ename'>${Name}</div><div class='e-pv-e-sign-ejob'>${Mail}</div></div></div>")"
                                  valueTemplate="@Html.Raw("<div style='display: flex;'><img id='user-img' class='e-pv-e-sign-valueTemp' src='../css/pdfviewer/images/employees/${Eimg}.png' style='margin: 3px 6px; border-radius: 50%; border: 1px solid ${getBorderColor(Mail)};' height='30px' width='30px' alt='employee'/><div><div class='e-pv-e-sign-name' style='margin-top: 3px;'>${Name}</div><div class='e-pv-e-sign-job'>${Mail}</div></div></div>")">
                    <e-dropdownlist-fields text="Name" value="Id"></e-dropdownlist-fields>
                </ejs-dropdownlist>
            </div>
            <ejs-toolbar id="e-pv-e-sign-toolbar-section" cssClass="e-pv-e-sign-toolbar-section">
                <e-toolbar-items>
                    <e-toolbar-item template="@dropdownMenu" tooltipText="User Dropdown" align="Left"></e-toolbar-item>
                    <e-toolbar-item template="@btntemplate" showTextOn="Overflow" align="Right" click="finishSigning"></e-toolbar-item>
                </e-toolbar-items>
            </ejs-toolbar>
            <ejs-pdfviewer id="pdfviewer" enableToolbar="false" enableNavigationToolbar="false" enableAnnotationToolbar="false" downloadFileName='eSign_designMode.pdf'
                           showNotificationDialog="false" documentLoad="documentLoad" zoomMode='FitToPage'
                           formFieldPropertiesChange="fieldChange" downloadFileName="fileName"
                           resourceUrl="https://cdn.syncfusion.com/ej2/27.2.2/dist/ej2-pdfviewer-lib"
                           documentPath="https://cdn.syncfusion.com/content/pdf/eSign_filling.pdf"
                           toolbarSettings='@(new Syncfusion.EJ2.PdfViewer.PdfViewerToolbarSettings {ShowTooltip = true, ToolbarItems = "OpenOption,PageNavigationTool,MagnificationTool,DownloadOption,PrintOption,FormDesignerEditTool"})'>
            </ejs-pdfviewer>
            <ejs-dialog id="modal_dialog" animationSettings="Modalanimation" width="335px" isModal="true" created="modalCreated" content="content" visible="false">
                <e-dialog-buttons>
                    <e-dialog-dialogbutton buttonModel="Okbutton" click="dlgButtonClick"></e-dialog-dialogbutton>
                </e-dialog-buttons>
            </ejs-dialog>
            <div id="e-pv-e-sign-btn-template">
                <ejs-button id="e-pv-e-sign-finishSigning" content="Finish Signing" tooltipText="Finish Signing" cssClass="e-outline"></ejs-button>
            </div>
        </div>
    </div>
}

@section Meta {
    <meta name="description"
          content="This example demonstrates the eSign PDF Forms in ASP.NET Core PDF Viewer control. Explore here for more details." />
}

@section ActionDescription {
    <div id="action-description">
        <p>
            This sample enables two different users to sign the document. The first user must fill out and sign their designated fields, which are visible only to them. Once the first user has completed their section, the second user can be selected to fill out and sign their own fields. After both users have signed, the document can be finalized.
        </p>
    </div>
}

@section Description {
    <div id="description">
        <p>
            More information on the PDF Viewer instantiation can be found in this
            <a target="_blank" href="https://ej2.syncfusion.com/aspnetcore/documentation/pdfviewer/getting-started" aria-label="Navigate to the documentation for getting started with ASP.NET Core PDF Viewer control">
                documentation section
            </a>.
        </p>

    </div>
}

<style>

    #pdfviewer{
        display: block;
        height: 640px;
    }

    .e-pv-e-sign-control {
        font-family: Roboto;
        font-size: 14px;
        font-style: normal;
        font-weight: 400;
        letter-spacing: 0.24px;
    }

    .e-pv-e-sign-toolbar-section {
        z-index: 1001;
        width: 100% !important;
        height: 48px !important;
        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15), 0px 1px 2px 0px rgba(0, 0, 0, 0.30);
    }

    #e-pv-e-sign-finishSigning {
        width: 115px !important;
        height: 28px;
        min-height: 0;
        padding: 0;
        font-size: 12px;
        flex-shrink: 0;
        border-radius: 16px;
        border: 1px solid;
    }

    #e-pv-e-sign-finishSigning span:first-child {
        margin-top: 3px;
    }

    #e-pv-e-sign-dropdown-menu {
        width: 190px;
        position: absolute;
        left: 0px;
    }

    #e-pv-e-sign-dropdown-menu .e-input-group {
        border: none;
    }

    #e-pv-e-sign-dropdown-menu .e-input-group:not(.e-float-icon-left):not(.e-float-input).e-input-focus::before,
    #e-pv-e-sign-dropdown-menu .e-input-group:not(.e-float-icon-left):not(.e-float-input).e-input-focus::after {
        width: 0px;
    }

    .e-pv-e-sign-name,
    .e-pv-e-sign-ename {
        margin-top: 10px;
        font-size: 14px;
        font-family: Roboto;
        font-style: normal;
        font-weight: 400;
        line-height: 18px;
    }

    .e-pv-e-sign-job,
    .e-pv-e-sign-ejob {
        font-size: 12px;
        font-family: Roboto;
        font-style: normal;
        font-weight: 400;
        line-height: 12px;
        letter-spacing: 0.2px;
    }

    .e-pv-e-sign-ename,
    .e-pv-e-sign-ejob {
        position: relative;
        right: 15px;
    }

    #e-pv-e-sign-dropdown-menu .e-input-group .e-control-wrapper .e-ddl e-lib .-keyboard .e-valid-input {
        border: none !important;
    }

    #e-pv-e-sign-employees_popup {
        width: 200px !important;
        z-index: 1000 !important;
    }

    #modal_dialog_dialog-content {
        padding: 30px 20px 0px 60px !important;
    }
</style>

<script>
    var pdfViewer; 
    var currentUser = 'andrew@mycompany.com';
    var currentUserBorderColor = 'red';
    var preventChange = false;
    var state = false;
    var fileName = "eSign_designMode.pdf";
    var dialogObj;
    var otherFormFieldDetails;
    var currentFormFieldDetails;
    var formFieldCollections;
    var andrewBackground = '#ffefef';
    var anneBackground = '#eff7ef';
    var finishedBackground = '#daeaf7ff';

    var userDetails = [
        { Name: 'Anne Dodsworth', Eimg: 'profile1', Id: "00ff00", Mail: "anne@mycompany.com", fieldIds: [] },
        { Name: 'Andrew Fuller', Eimg: 'profile2', Id: "ff0000", Mail: "andrew@mycompany.com", fieldIds: [] }
    ];

    window.onload = function () {
        pdfViewer = document.getElementById('pdfviewer').ej2_instances[0];
     }

    function userChange(args) {
        currentUser = args.itemData.Mail;
        if (args.itemData.Mail === 'andrew@mycompany.com') {
            document.getElementById('user-img').style.borderColor = 'red';
        } else {
            document.getElementById('user-img').style.borderColor = 'green';
        }
        updateUserFormField();
        if (preventChange) {
            document.getElementById('user-img').style.borderColor = 'red';
            args.cancel = true;
        }
    }

    function getBorderColor(email) {
        return email === 'andrew@mycompany.com' ? 'red' : 'green';
    }

    function modalCreated() {
        dialogObj = this;
    }

    function dlgButtonClick() {
        dialogObj.hide();
    }

    function updateUserFormField() {
        formFieldCollections = pdfViewer.formFieldCollections;
        otherFormFieldDetails = formFieldCollections.filter(formField => formField.customData.author === 'anne');
        currentFormFieldDetails = formFieldCollections.filter(formField => formField.customData.author === 'andrew');

        if (currentUser === 'andrew@mycompany.com') {
            otherFormFieldDetails.forEach(field => {
                if (field.value !== "") {
                    pdfViewer.formDesigner.updateFormField(field, { backgroundColor: finishedBackground });
                    pdfViewer.formDesignerModule.updateFormField(field, { isReadOnly: true });
                    currentFormFieldDetails.forEach(currentField => {
                        pdfViewer.formDesigner.updateFormField(currentField, { backgroundColor: andrewBackground });
                        pdfViewer.formDesignerModule.updateFormField(currentField, { isReadOnly: true });
                    });
                } else {
                    currentFormFieldDetails.forEach(currentField => {
                        pdfViewer.formDesigner.updateFormField(currentField, { backgroundColor: andrewBackground });
                    });
                }
                var otherUserField = document.getElementById(field.id + '_content_html_element');
                if (otherUserField) {
                    var currentFormField = pdfViewer.formFieldCollections.find(formField => formField.id === field.id);
                    if (currentFormField.type !== 'DropDown') {
                        if (!currentFormField.value && otherUserField)
                            pdfViewer.formDesignerModule.updateFormField(currentFormField, { visibility: 'hidden' });
                    } else {
                        if (currentFormField.value.length !== 0 && otherUserField)
                            pdfViewer.formDesignerModule.updateFormField(currentFormField, { visibility: 'hidden' });
                    }
                }
            });
        } else {
            validation(currentFormFieldDetails);
            if (!state) {
                currentFormFieldDetails.forEach(field => {
                    pdfViewer.formDesigner.updateFormField(field, { backgroundColor: finishedBackground });
                    pdfViewer.formDesignerModule.updateFormField(field, { isReadOnly: true });
                    otherFormFieldDetails.forEach(otherField => {
                        pdfViewer.formDesigner.updateFormField(otherField, { backgroundColor: anneBackground });
                        pdfViewer.formDesignerModule.updateFormField(otherField, { isReadOnly: false });
                    });
                });
                otherFormFieldDetails.forEach(field => {                   
                    pdfViewer.formDesignerModule.updateFormField(field, { visibility: 'visible' });                    
                });
            }
        }
    }

    function validation(forms) {
        let errorMessage = "Required Field(s): ";
        let flag = false;
        let radioGroupName = "";
        let allFieldsValid = true;

        forms.forEach(form => {
            let text = "";
            if (form.isRequired) {
                switch (form.type.toString()) {
                    case "Checkbox":
                        if (!form.isChecked) {
                            text = form.name;
                            allFieldsValid = false;
                        }
                        break;
                    case "RadioButton":
                        if (!flag) {
                            radioGroupName = form.name;
                            if (form.isSelected) flag = true;
                        }
                        break;
                    case "DropdownList":
                        if (form.value.length === 0) {
                            text = form.name;
                            allFieldsValid = false;
                        }
                        break;
                    default:
                        if (!form.value || (typeof form.newValue === 'string' && form.newValue === "")) {
                            text = form.name;
                            allFieldsValid = false;
                        }
                        break;
                }

                if (text) {
                    errorMessage = errorMessage === "Required Field(s): " ? errorMessage + text : errorMessage + ", " + text;
                }
            }
        });

        if (!flag && radioGroupName) {
            errorMessage = errorMessage === "Required Field(s): " ? errorMessage + radioGroupName : errorMessage + ", " + radioGroupName;
            allFieldsValid = false;
        }

        if (errorMessage !== "Required Field(s): ") {
            state = true;
            dialogObj.content = errorMessage;
            dialogObj.show();
            preventChange = true;
        } else {
            state = false;
            preventChange = false;
        }
    }

    function fieldChange(args) {
        let errorMessage = "Required Field(s): ";
        const forms = pdfViewer.formFieldCollections;
        let flag = false;
        let allFieldsValid = true;
        let radioGroupName = "";

        forms.forEach(form => {
            let text = "";
            if (form.isRequired) {
                if (form.type.toString() === "Checkbox" && !form.isChecked) {
                    text = form.name;
                    allFieldsValid = false;
                } else if (form.type === "RadioButton" && !flag) {
                    radioGroupName = form.name;
                    if (form.isSelected) flag = true;
                } else if (form.type.toString() !== "Checkbox" && form.type !== "RadioButton" && (!form.value || (typeof args.newValue === 'string' && args.newValue === ""))) {
                    text = form.name;
                    allFieldsValid = false;
                } else if (form.type.toString() === "DropdownList" && form.value.length === 0) {
                    text = form.name;
                    allFieldsValid = false;
                }

                if (text) {
                    errorMessage = errorMessage === "Required Field(s): " ? errorMessage + text : errorMessage + ", " + text;
                }
            }
        });

        if (!flag && radioGroupName) {
            errorMessage = errorMessage === "Required Field(s): " ? errorMessage + radioGroupName : errorMessage + ", " + radioGroupName;
            allFieldsValid = false;
        }

        document.getElementById('e-pv-e-sign-finishSigning').disabled = !allFieldsValid;
    }

    function documentLoad() {
        pdfViewer = document.getElementById('pdfviewer').ej2_instances[0];
        pdfViewer.designerMode = false;
        updateUserFormField();
    }

    function finishSigning() {
        for (const formField of pdfViewer.formFieldCollections) {
            pdfViewer?.formDesignerModule.updateFormField(formField, { backgroundColor: finishedBackground });
        }
        var url = window.baseurl + 'api/PdfViewer/FlattenDownload';
        pdfViewer.saveAsBlob().then((blob) => {
            return convertBlobToBase64(blob);
        }).then((base64String) => {
            const xhr = new XMLHttpRequest();
            xhr.open('POST', url, true);
            xhr.setRequestHeader('Content-Type', 'application/json; charset=UTF-8');
            const requestData = JSON.stringify({ base64String: base64String });
            xhr.onload = () => {
                if (xhr.status === 200) {
                    const responseBase64 = xhr.responseText.split('base64,')[1];
                    if (responseBase64) {
                        const blob = createBlobFromBase64(responseBase64, 'application/pdf');
                        const blobUrl = URL.createObjectURL(blob);
                        downloadDocument(blobUrl);
                        pdfViewer.load(xhr.responseText, null);
                        document.getElementById('e-pv-e-sign-finishSigning').disabled = true;
                        document.getElementById('e-pv-e-sign-employees').ej2_instances[0].enabled = false;
                    } else {
                        console.error('Invalid base64 response.');
                    }
                } else {
                    console.error('Download failed:', xhr.statusText);
                }
            };
            xhr.onerror = () => {
                console.error('An error occurred during the download:', xhr.statusText);
            };
            xhr.send(requestData);
        }).catch((error) => {
            console.error('Error saving Blob:', error);
        });

    }

    function convertBlobToBase64(blob) {
        return new Promise((resolve, reject) => {
            const reader = new FileReader();
            reader.readAsDataURL(blob);
            reader.onloadend = () => {
                if (typeof reader.result === 'string') {
                    resolve(reader.result);
                } else {
                    reject(new Error('Failed to convert Blob to Base64'));
                }
            };
            reader.onerror = (error) => reject(error);
        });
    }

    function createBlobFromBase64(base64String, contentType) {
        const sliceSize = 512;
        const byteCharacters = atob(base64String);
        const byteArrays = [];
        for (let offset = 0; offset < byteCharacters.length; offset += sliceSize) {
            const slice = byteCharacters.slice(offset, offset + sliceSize);
            const byteNumbers = new Array(slice.length);
            for (let i = 0; i < slice.length; i++) {
                byteNumbers[i] = slice.charCodeAt(i);
            }
            const byteArray = new Uint8Array(byteNumbers);
            byteArrays.push(byteArray);
        }
        return new Blob(byteArrays, { type: contentType });
    }

    function downloadDocument(blobUrl) {
        const anchorElement = document.createElement('a');
        anchorElement.href = blobUrl;
        anchorElement.target = '_parent';
        const downloadFileName = pdfViewer.fileName || 'default.pdf';
        anchorElement.download = downloadFileName.endsWith('.pdf')
            ? downloadFileName
            : `${downloadFileName.split('.pdf')[0]}.pdf`;
        document.body.appendChild(anchorElement);
        anchorElement.click();
        document.body.removeChild(anchorElement);
        URL.revokeObjectURL(blobUrl);
    }

</script>

@section Title {
    <title>ASP.NET Core PDF Viewer eSigning PDF Forms Example - Syncfusion Demos </title>
}
@section Header {
    <h1 class='sb-sample-text'>Example of eSigning PDF Forms in ASP.NET Core PDF Viewer Control</h1>
}
