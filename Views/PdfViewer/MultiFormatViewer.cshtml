@using Syncfusion.EJ2
@* @using EJ2CoreSampleBrowser.Controllers.Uploader *@
@using Syncfusion.EJ2.PdfViewer

@section ControlsSection{
    <div class="control-section">
        <div>
            <div id="dropArea" class="viewer-file-droparea" style="height: auto; overflow: auto; margin-bottom: 25px;">
                <ejs-button id="browse" content="Browse..."></ejs-button>
                <div>
                    <p style="margin: 15px;">OR</p>
                    <p id="drop">Drop files (Word, Excel, PowerPoint, Image, PDF)</p>
                </div>
                <div id="progressbarContainer" style="display: none;">
                    <div id="file-details">
                        <p id="fileName"></p>
                        <p id="fileSize"></p>
                    </div>
                    <div style="justify-content: center;" id="linearProgressBar">
                        <ejs-progressbar id="linear" maximum=100 minimum=0 value=0
                                     width="width" height="height" load="progressLoad" style="width: fit-content;">
                            <e-progressbar-animation enable=false duration=0 delay=0></e-progressbar-animation>
                        </ejs-progressbar><span id="progress-status" style="padding: 5px 5px;"></span>
                    </div>
                    <div id="uploadedMessage" style="display: none; margin-top: 10px;">
                        <p style="color: rgb(110, 218, 110);">File successfully uploaded...</p>
                    </div>
                    <div id="fileSupportMessage" style="display: none; margin-top: 10px;">
                        <p style="color: rgb(203, 38, 38);">File not supported!</p>
                    </div>
                    <div id="fileSizeValidation" style="display: none; margin-top: 10px;">
                        <p style="color: rgb(203, 38, 38);">Maximum file size is (4.0 MB) for this operation...</p>
                    </div>
                </div>
                <div style="display: none;">
                    <ejs-uploader #templateupload id='templatefileupload' multiple=false dropArea="#dropArea" allowedExtensions=".doc, .docx, .rtf, .docm, .dotm, .dotx, .dot, .xls, .xlsx, .pptx, .pptm, .potx, .potm .jpeg, .png, .bmp, .pdf, .jpg" selected="onSelect"></ejs-uploader>
                </div>
            </div>
            <div id="pdfviewer-container" style="display: none;">
                <div class="flex-container">
                    <label class="switchLabel" for="checked">Standalone PDF Viewer</label>
                    <div class="e-message render-mode-info">
                        <span class="e-msg-icon render-mode-info-icon"
                          title="Turn OFF to render the PDF Viewer as server-backed"></span>
                    </div>
                    <ejs-switch cssClass="buttonSwitch" id="checked" change="change" checked="true"></ejs-switch>
                </div>
                <ejs-pdfviewer #pdfviewer id="pdfViewer" class="e-pv-multi-format-pdfviewer" resourceUrl="https://cdn.syncfusion.com/ej2/23.2.6/dist/ej2-pdfviewer-lib" zoomMode="FitToPage" documentLoad="documentLoaded" ajaxRequestSuccess="ajaxRequestSuccess" toolbarSettings="@(new Syncfusion.EJ2.PdfViewer.PdfViewerToolbarSettings  { ShowTooltip = true, ToolbarItems = ( "UndoRedoTool PageNavigationTool MagnificationTool PanTool SelectionTool CommentTool SubmitForm SearchOption AnnotationEditTool FormDesignerEditTool PrintOption DownloadOption" )  })" style="height:641px;"></ejs-pdfviewer>
            </div>
        </div>
    </div>
}

@section Meta{
    <meta name="description"
      content="This example demonstrates the Multi-Format Viewer in ASP.NET Core PDF Viewer control. Explore here for more details." />
}

@section ActionDescription{
    <div id="action-description">
        <p>This sample shows how it loads various file types like PDFs, images, and Microsoft Office documents (Word, Excel, PowerPoint) into the PDF Viewer.</p>
    </div>
}

@section Description{
    <div id="action-description">
        <p>
            This sample provides a hands-on demonstration of the PDF Viewer's ability to load and display a diverse range of file formats, including PDFs, images, and Microsoft Office documents such as Word, Excel, and PowerPoint files. Users can interact with the sample in the following ways:
        </p>
        <ul>
            <li>Use the Browse button to select any file of interest.</li>
            <li>Alternatively, drag and drop a chosen file into the designated file pick area.</li>
            <li>Once a valid file is selected, it will be seamlessly loaded into the PDF Viewer located below, allowing users to easily view and interact with the content.</li>
            <li>Support for various file formats, including:
                <ul>
                    <li>PDF - '.pdf'</li>
                    <li>Excel - '.xlsx','.xls'</li>
                    <li>Image - '.jpeg','.jpg','.png','.bmp'</li>
                    <li>PowerPoint - '.pptx','.pptm','.potx','.potm'</li>
                    <li>Word - '.doc','.docx','dot','dotx','docm','dotm','rtf'</li>
                </ul>
            </li>
        </ul>
        <p>Note : The PDF conversions are performed using the appropriate libraries, while the role of the PDF Viewer is solely to display the converted PDF document.</p>
    </div>
    <div id="description">
        <p>
            More information on the PDF Viewer instantiation can be found in this
            <a target="_blank" href="https://ej2.syncfusion.com/aspnetcore/documentation/pdfviewer/getting-started" aria-label="Navigate to the documentation for getting started with ASP.NET Core PDF Viewer control">
        documentation section</a>.
        </p>

    </div>
}

<style>
    .viewer-file-droparea {
        border: 1px dashed #c3c3cc;
        position: relative;
        text-align: center;
        padding: 20px 0 10px;
    }

    .flex-container {
        display: flex;
        justify-content: flex-end;
        align-items: center;
    }

    .render-mode-info {
        background: none;
        border: none;
        padding-left: 0px;
    }

        .render-mode-info .render-mode-info-icon {
            height: 16px;
            width: 16px;
        }

    .switchLabel {
        font-family: "Segoe UI", "GeezaPro", "DejaVu Serif", sans-serif;
        font-weight: 400;
        line-height: 20px;
        letter-spacing: 0.24px;
        text-align: right;
        font-size: 14px;
        margin-bottom: 3px;
    }

    .render-mode-info .render-mode-info-icon::before {
        line-height: normal;
    }

    .buttonSwitch {
        Width: 40px;
        Height: 24px;
    }

    .e-pv-multi-format-pdfviewer .e-pv-text-search-bar {
        top: 40px !important;
    }

    .e-bigger .e-pv-multi-format-pdfviewer .e-pv-text-search-bar {
        top: 48px !important;
    }
</style>
@section PreScripts{
    <script>

        var uploadProgress;
        var parentElement;
        var pdfViewerProgressValue = 0;
        var uploadProgressValue = 0;
        var extensions = ['doc', 'docx', 'rtf', 'docm', 'dotm', 'dotx', 'dot', 'xls', 'xlsx', 'pptx', 'pptm', 'potx', 'potm', 'jpeg', 'png', 'bmp', 'pdf', 'jpg'];
        var dropElement = document.getElementById('dropArea');
        document.getElementById('browse').onclick = function () {
            document.getElementsByClassName('e-file-select-wrap')[0].querySelector('button').click();
            return false;
        };

        function progressLoad(args) {
            var selectedTheme = location.hash.split('/')[1];
            selectedTheme = selectedTheme ? selectedTheme : 'Material';
            args.progressBar.theme = (selectedTheme.charAt(0).toUpperCase() +
                selectedTheme.slice(1)).replace(/-dark/i, 'Dark').replace(/contrast/i, 'Contrast');
            if (selectedTheme === 'fabric') {
                args.progressBar.secondaryProgressColor = '#b0d0e9'
            } else if (selectedTheme === 'material-dark') {
                args.progressBar.secondaryProgressColor = '#b8b8b8'
            } else if (selectedTheme === 'material') {
                args.progressBar.secondaryProgressColor = '#f087ab'
            } else if (selectedTheme === 'bootstrap5-dark') {
                args.progressBar.secondaryProgressColor = '#2b5288'
            } else if (selectedTheme === 'bootstrap5') {
                args.progressBar.secondaryProgressColor = '#98c5f5'
            } else if (selectedTheme === 'bootstrap') {
                args.progressBar.secondaryProgressColor = '#acc6dc'
            }
            else if (selectedTheme === 'bootstrap4') {
                args.progressBar.secondaryProgressColor = '#98c5f5'
            }
            else if (selectedTheme === 'bootstrap-dark') {
                args.progressBar.secondaryProgressColor = '#b8b8b8'
            } else if (selectedTheme === 'highcontrast') {
                args.progressBar.secondaryProgressColor = '#aca379'
            } else if (selectedTheme === 'fluent-dark') {
                args.progressBar.secondaryProgressColor = '#2b5288'
            } else if (selectedTheme === 'fluent') {
                args.progressBar.secondaryProgressColor = '#98c5f5'
            } else if (selectedTheme === 'tailwind-dark') {
                args.progressBar.secondaryProgressColor = '#386e7f'
            } else if (selectedTheme === 'tailwind') {
                args.progressBar.secondaryProgressColor = '#b1afe9'
            }
        };

        function onSelect(args) {
            uploadProgress = document.getElementById("linear").ej2_instances[0];
            uploadProgress.value = 0;
            uploadProgress.refresh();
            let progressBarContainer = document.getElementById("progressbarContainer");
            let progressBar = document.getElementById("linearProgressBar");
            let progressMessage = document.getElementById("uploadedMessage");
            let fileSupportMessage = document.getElementById("fileSupportMessage");
            let fileDetails = document.getElementById("file-details");
            var fileSizeValidation = document.getElementById("fileSizeValidation");
            progressBarContainer.style.display = "block";
            progressBar.style.display = "flex";
            progressMessage.style.display = "none";
            fileSupportMessage.style.display = "none";
            fileSizeValidation.style.display = "none";
            if (!dropElement.querySelector('li')) {
                this.filesData = [];
            }
            if (ej.base.isNullOrUndefined(document.getElementById('dropArea').querySelector('.e-upload-files'))) {
                parentElement = ej.base.createElement('ul', { className: 'e-upload-files', });
                document.getElementsByClassName('e-upload')[0].appendChild(parentElement);
            }
            var validFiles = args.filesData;
            if (validFiles.length === 0) {
                progressBarContainer.style.display = "block";
                progressBar.style.display = "none";
                if (document.getElementById('pdfviewer-container').style.display === "block") {
                    progressMessage.style.display = "block";
                    fileDetails.style.display = "block";
                }
                args.cancel = true;
                return;
            }
            if (!extensions.includes(validFiles[0].type)) {
                fileSupportMessage.style.display = "block";
                progressBar.style.display = "none";
                fileDetails.style.display = "none";
                args.cancel = true;
                return;
            }
            if (validFiles[0].type != "pdf" && validFiles[0].size > 4000000) {
                fileSizeValidation.style.display = "block";
                progressBar.style.display = "none";
                fileDetails.style.display = "none";
                args.cancel = true;
                return;
            }
            fileDetails.style.display = "block";
            document.getElementById("fileName").innerHTML = args.filesData[0].name;
            var viewer = document.getElementById('pdfViewer').ej2_instances[0];
            viewer.downloadFileName = args.filesData[0].name;
            viewer.exportAnnotationFileName = args.filesData[0].name;
            let size = document.getElementById("fileSize");
            if((args.filesData[0].size.toString()).length <= 6){
                size.innerHTML = ((args.filesData[0].size/1024).toFixed(1)).toString()+" KB";
            } else {
                let kbsize = args.filesData[0].size/1024;
                size.innerHTML = ((kbsize/1024).toFixed(1)).toString()+" MB";
            }
            formSelectedData(validFiles[0], this);
            this.filesData = this.filesData.concat(validFiles);
            args.cancel = true;
        }

        function formSelectedData(file, proxy) {
            var liEle = ej.base.createElement('li', {
                className: 'e-upload-file-list',
                attrs: {
                    'data-file-name': file.name
                },
            });

            readURL(liEle, file);
            proxy.fileList.push(liEle);
        }

        function readURL(li, args) {
            var file = args.rawFile;
            var viewer = document.getElementById('pdfViewer').ej2_instances[0];
            var reader = new FileReader();
            var type = args.type;
            reader.addEventListener('load', function () {
                let post = JSON.stringify({
                    'data': reader.result,
                    'type': type
                });
                const url = window.baseurl + 'api/PdfViewer/LoadFile';
                let xhr = new XMLHttpRequest();
                xhr.open('Post', url, true);
                xhr.setRequestHeader('Content-type', 'application/json; charset=UTF-8');
                xhr.upload.addEventListener('progress', (event) => {
                    if (event.lengthComputable) {
                        const progressValue = Math.round((event.loaded / event.total) * 100);
                        uploadProgressValue = progressValue;
                        const totalProgress = calculateTotalProgress();
                        updateProgressBar(totalProgress);
                    document.getElementById("progress-status").innerHTML = totalProgress.toString()+"%";
                    }
                });
                xhr.onload = function (args) {
                    viewer.documentPath = this.responseText;
                    pdfViewerProgressValue = 60;
                    const totalProgress = calculateTotalProgress();
                    updateProgressBar(totalProgress);
                    document.getElementById("progress-status").innerHTML = totalProgress.toString() + "%";
                    document.getElementById('pdfviewer-container').style.display = "block";
                }
                xhr.send(post);
            }, false);
            if (file) {
                reader.readAsDataURL(file);
            }
        }

        function calculateTotalProgress() {
            const totalProgress = (uploadProgressValue + pdfViewerProgressValue) / 2;
            return totalProgress;
        }

        function updateProgressBar(progress) {
            uploadProgress.value = progress;
            uploadProgress.dataBind();
        }

        function ajaxRequestSuccess(args) {
            if (args.action === "Load") {
                pdfViewerProgressValue = 70;
                const totalProgress = calculateTotalProgress();
                updateProgressBar(totalProgress);
                document.getElementById("progress-status").innerHTML = totalProgress.toString() + "%";
            }
            if (args.action === "RenderPdfPages") {
                if (pdfViewerProgressValue < 90){
                    pdfViewerProgressValue = pdfViewerProgressValue + 10;
                    const totalProgress = calculateTotalProgress();
                    updateProgressBar(totalProgress);
                    document.getElementById("progress-status").innerHTML = totalProgress.toString() + "%";
                }
            }
        }

        function documentLoaded() {
            var progressValue = document.getElementById("progress-status");
            var viewer = document.getElementById('pdfViewer').ej2_instances[0];
            pdfViewerProgressValue = 100;
            const totalProgress = calculateTotalProgress();
            updateProgressBar(totalProgress);
            progressValue.innerHTML = totalProgress.toString() + "%";
            setTimeout(() => {
                document.getElementById("linearProgressBar").style.display = "none";
                document.getElementById("uploadedMessage").style.display = "block"
                uploadProgressValue = 0;
                pdfViewerProgressValue = 0;
                progressValue.innerHTML = "0%";
            }, 1000);
        }

        function change(args) {
            var viewer = document.getElementById('pdfViewer').ej2_instances[0];
            if (args.checked) {
                viewer.serviceUrl = '';
            } else {
                viewer.serviceUrl = window.baseurl + 'api/PdfViewer';
            }
            viewer.dataBind();
            viewer.load(viewer.documentPath, null);
        }
    </script>
}
@section Title{
    <title>ASP.NET Core PDF Viewer Multi-Format Viewer Example - Syncfusion Demos </title>
}
@section Header{
    <h1 class='sb-sample-text'>Example of Multi-Format Viewer in ASP.NET Core PDF Viewer Control</h1>
}
