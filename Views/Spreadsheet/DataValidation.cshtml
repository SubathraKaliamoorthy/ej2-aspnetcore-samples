@using Syncfusion.EJ2
@using Syncfusion.EJ2.Spreadsheet

@section ControlsSection{
    <div class="control-section">
        <ejs-spreadsheet id="spreadsheet" created="createdHandler">
    <e-spreadsheet-sheets>
        <e-spreadsheet-sheet name="Gross Pay" selectedRange="D3">
            <e-spreadsheet-ranges>
                <e-spreadsheet-range dataSource="ViewBag.GrossPay" startCell="A3"></e-spreadsheet-range>
            </e-spreadsheet-ranges>
            <e-spreadsheet-rows>
                <e-spreadsheet-row>
                    <e-spreadsheet-cells>
                        <e-spreadsheet-cell value="Gross Pay Calculation">
                            <e-spreadsheet-cellstyle fontSize="20pt" fontWeight="Bold" textAlign="Center" backgroundColor="#B3FFB3" verticalAlign="Middle"></e-spreadsheet-cellstyle>
                        </e-spreadsheet-cell>
                    </e-spreadsheet-cells>
                </e-spreadsheet-row>
                <e-spreadsheet-row index="13">
                    <e-spreadsheet-cells>
                        <e-spreadsheet-cell index=7 value="Total Gross">
                            <e-spreadsheet-cellstyle border="1px solid #A6A6A6" fontWeight="Bold" textAlign="Center" verticalAlign="Middle"></e-spreadsheet-cellstyle>
                        </e-spreadsheet-cell>
                        <e-spreadsheet-cell formula="=Sum(I4:I13)" format="$#,##0.00">
                            <e-spreadsheet-cellstyle border="1px solid #A6A6A6" fontWeight="Bold" textAlign="Center" verticalAlign="Middle"></e-spreadsheet-cellstyle>
                        </e-spreadsheet-cell>
                    </e-spreadsheet-cells>
                </e-spreadsheet-row>
            </e-spreadsheet-rows>
            <e-spreadsheet-columns>
                <e-spreadsheet-column width=88></e-spreadsheet-column>
                <e-spreadsheet-column width=120></e-spreadsheet-column>
                <e-spreadsheet-column width=106></e-spreadsheet-column>
                <e-spreadsheet-column width=98></e-spreadsheet-column>
                <e-spreadsheet-column width=110></e-spreadsheet-column>
                <e-spreadsheet-column width=110></e-spreadsheet-column>
                <e-spreadsheet-column width=110></e-spreadsheet-column>
                <e-spreadsheet-column width=98></e-spreadsheet-column>
                <e-spreadsheet-column width=130></e-spreadsheet-column>
            </e-spreadsheet-columns>
        </e-spreadsheet-sheet>
    </e-spreadsheet-sheets>
</ejs-spreadsheet>
    </div>
}

@section Meta{
                    <meta name="description" content="This example demonstrates the Data Validation in ASP.NET Core Spreadsheet control. Explore here for more details."/>
                }

@section ActionDescription{
	<div id="action-description">
        <p>
            This sample explains the Data Validation feature with the gross pay calculation as an example. It is used to restrict the data that the user enters into a cell. To clear the applied validation, click the <code>Data Validation</code> button in the Data tab and <code>Clear Validation</code> option. You can also highlight the invalid data by selecting <code>Highlight Invalid Data</code> option.
        </p>
	</div>
}
@section Description{
	<div id="description">
        <ul>
        <li>
            This feature allows you to apply validation to a cell or range of cells based on the conditions required. You can enable or disable data validation by using the <code>allowDataValidation</code> property.
        </li>
        <li>
            In this sample, we have applied data validation for List, String, Number, Date and Time by using the <code>addDataValidation</code> method with <code>ValidationModel</code> as argument.
        </li>
        <li>
            In the Employee Name column, we have used <code>TextLength</code> validation to provide proper name with more than 3 text length.
            In time in and time out column, we have provided <code>Time</code> validation for working hours between 8.00 AM to 6.00 PM. In the weekdays column, we have used <code>List</code> validation for weekdays (Monday to Friday).
        </li>
        <li>
            In the hours worked column, we have used <code>WholeNumber</code> validation to find out overtime calculation(i.e more than 8 hours). And also, we used the <code>addInvalidHighlight</code> to highlight the overtime hours of the employee.
        </li>
        <li>
            In the gross pay with overtime column, we have used <code>WholeNumber</code> validation.
            In this validation, we have used the input value as the cell reference. It helps in changing the criteria dynamically.
        </li>
    </ul>
        <p>
            More information about the Data Validation can be found in this
            <a target="_blank" href="https://ej2.syncfusion.com/aspnetcore/documentation/spreadsheet/cell-range/#data-validation" aria-label="documentation">
                documentation</a> section.
        </p>
	</div>
}

<script>
	function createdHandler() {
		this.merge('A1:I2');
        this.setBorder({ border: '1px solid #A6A6A6' }, "A1:I13");
        this.cellFormat({ textAlign: 'center', verticalAlign: 'middle'}, 'A3:I13');
        this.cellFormat({ backgroundColor: '#B3FFB3', fontWeight : "bold"}, 'A3:I3');
        this.numberFormat('$#,##0.00', 'H4:I13');
        this.numberFormat('m/d/yyyy', 'C4:C13');
        this.wrap('H3:I3');
        //Add Data validation to range.
        this.addDataValidation({ type: 'WholeNumber', operator: 'LessThan', value1: '9', ignoreBlank: false }, 'G4:G13');
        this.addDataValidation({ type: 'TextLength', operator: 'GreaterThan', value1: '3', ignoreBlank: false }, 'B4:B13');
        this.addDataValidation({ type: 'Time', operator: 'GreaterThan', value1: '8:00:00 AM', ignoreBlank: false  }, 'E4:E13');
        this.addDataValidation({ type: 'Time', operator: 'LessThan', value1: '6:00:00 PM', ignoreBlank: false  }, 'F4:F13');
        this.addDataValidation({ type: 'List', value1: 'Mon, Tue, Wed, Thu, Fri', ignoreBlank: false  }, 'D4:D13');
        this.addDataValidation({ type: 'WholeNumber', operator: 'LessThan', value1: '=H5', ignoreBlank: false }, 'I4:I13');
        //Highlight Invalid Data.
        this.addInvalidHighlight('G4:G13');
        this.addInvalidHighlight('I4:I13');
        @* custom code start *@
        this.updateCell({ value: 'Basic Salary (30/hour)=' }, "H3");
        this.updateCell({ value: 'GrossPay With Overtime (15/hour)=' }, "I3");
        @* custom code end *@
	}
</script>

@*custom code start*@

<style>

    .control-section {
        height: 550px;
    }
    #sb-content .e-spreadsheet .e-tab .e-tab-text {
        display: inherit;
    }
</style>

@*custom code end*@
@section Title{
                    <title>ASP.NET Core Spreadsheet Data Validation Example - Syncfusion Demos </title> 
                }
@section Header{
                    <h1 class='sb-sample-text'>Example of Data Validation in ASP.NET Core Spreadsheet Control</h1>
                }